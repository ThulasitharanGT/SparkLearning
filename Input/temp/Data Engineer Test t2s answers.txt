val customerDF=spark.read.option("header","true").csv("file:///home/raptor/IdeaProjects/SparkLearning/Input/temp/customer_test.csv")
val storeDF=spark.read.option("header","true").option("multiline","true").csv("file:///home/raptor/IdeaProjects/SparkLearning/Input/temp/store_test.csv")
val ordersDF=spark.read.option("header","true").csv("file:///home/raptor/IdeaProjects/SparkLearning/Input/temp/orders_test.csv")

val ordersDFFinal=ordersDF.selectExpr("*","substring(order_date,6,2) as order_month").selectExpr("*","CASE WHEN order_month = 01 THEN 'JANUARY' WHEN order_month = 02 THEN 'FEBRUARY' WHEN order_month = 03 THEN 'MARCH'  WHEN order_month = 04 THEN 'APRIL'  WHEN order_month = 05 THEN 'MAY'  WHEN order_month = 06 THEN 'JUNE'  WHEN order_month = 07 THEN 'JULY'  WHEN order_month = 08 THEN 'AUGUST' WHEN order_month = 09 THEN 'SEPTEMBER' WHEN order_month = 10 THEN 'OCTOBER' WHEN order_month = 11 THEN 'NOVEMBER' WHEN order_month = 12 THEN 'DECEMBER' ELSE 'NA' END as order_month_in_words","substring(order_date,1,4) as order_year").drop("order_date","order_month").selectExpr("id","total","customer_id","store_id","order_month_in_words as order_month","order_year")

ordersDFFinal.show(1,false)

/*
Year (Eg: 2020)
Month (Eg: January)
Store Name
Number of Orders
Total Revenue
*/

ordersDFFinal.filter("order_month='JANUARY' and store_id=1").agg(sum("total")).show

val result1DF=ordersDFFinal.as("orders").join(storeDF.as("store"),col("orders.store_id")===col("store.id"))

// id|total|customer_id|store_id|order_month| id|                name|             address|


val joinInput1DF=result1DF.groupBy("store_id","order_year").pivot("order_month").agg(sum("total"))
val joinInput2DF=result1DF.groupBy("store_id","order_year").agg(sum("total").as("Total_Revenue"))
val joinInput3DF=result1DF.groupBy("store_id","order_year").agg(count("orders.id").as("Number_of_Orders")) 

val finalResult1DF=joinInput1DF.drop("order_year").join(joinInput2DF.drop("order_year"),Seq("store_id")).join(joinInput3DF,Seq("store_id")).as("result").join(storeDF.as("store"),col("result.store_id")===col("store.id")).selectExpr("result.*","store.name as Store_Name").drop("store_id")

finalResult1DF.selectExpr("Store_Name","order_year","JANUARY","FEBRUARY","MARCH","APRIL","MAY","Total_Revenue","Number_of_Orders").show(1,false)

//"Store_Name","order_year","JANUARY","FEBRUARY","MARCH","APRIL","MAY","Total_Revenue","Number of Orders"


finalResult1DF.selectExpr("Store_Name","order_year","JANUARY","FEBRUARY","MARCH","APRIL","MAY","Total_Revenue","Number_of_Orders").coalesce(1).write.mode("overwrite").option("header","true").csv("file:///home/raptor/IdeaProjects/SparkLearning/output/result1_t2s")



/*
 A list of users who have placed less than 10 orders. It should have the following
columns:
First Name
Last Name
Email
Orders Placed by user
*/

val ordersDFFinal2=ordersDF.groupBy("customer_id").agg(count("id").as("total_orders")).where("total_orders < 10")

customerDF.as("customer").join(ordersDFFinal2.as("orders_result"),col("orders_result.customer_id")===col("customer.id")).selectExpr("customer.First_Name","customer.last_Name","md5(customer.Email) as MD5_encrypted_email","total_orders as Orders_Placed_by_user").coalesce(1).write.mode("overwrite").option("header","true").csv("file:///home/raptor/IdeaProjects/SparkLearning/output/result1_t2s_scn1")

customerDF.as("customer").join(ordersDFFinal2.as("orders_result"),col("orders_result.customer_id")===col("customer.id")).selectExpr("customer.id","customer.First_Name","customer.last_Name","md5(customer.Email) as MD5_encrypted_email").as("result_final").join(ordersDF.as("orders"),col("orders.customer_id")===col("result_final.id")).selectExpr("result_final.First_Name","result_final.last_Name","result_final.MD5_encrypted_email","orders.id as order_id").coalesce(1).write.mode("overwrite").option("header","true").csv("file:///home/raptor/IdeaProjects/SparkLearning/output/result1_t2s_scn2")


